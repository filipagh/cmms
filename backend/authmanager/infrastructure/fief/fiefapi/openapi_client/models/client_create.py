# coding: utf-8

"""
    Fief Administration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.23.2
    Contact: contact@fief.dev
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from authmanager.infrastructure.fief.fiefapi.openapi_client.configuration import Configuration


class ClientCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'first_party': 'bool',
        'client_type': 'ClientType',
        'redirect_uris': 'list[str]',
        'authorization_code_lifetime_seconds': 'int',
        'access_id_token_lifetime_seconds': 'int',
        'refresh_token_lifetime_seconds': 'int',
        'tenant_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'first_party': 'first_party',
        'client_type': 'client_type',
        'redirect_uris': 'redirect_uris',
        'authorization_code_lifetime_seconds': 'authorization_code_lifetime_seconds',
        'access_id_token_lifetime_seconds': 'access_id_token_lifetime_seconds',
        'refresh_token_lifetime_seconds': 'refresh_token_lifetime_seconds',
        'tenant_id': 'tenant_id'
    }

    def __init__(self, name=None, first_party=None, client_type=None, redirect_uris=None,
                 authorization_code_lifetime_seconds=None, access_id_token_lifetime_seconds=None,
                 refresh_token_lifetime_seconds=None, tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """ClientCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._first_party = None
        self._client_type = None
        self._redirect_uris = None
        self._authorization_code_lifetime_seconds = None
        self._access_id_token_lifetime_seconds = None
        self._refresh_token_lifetime_seconds = None
        self._tenant_id = None
        self.discriminator = None

        self.name = name
        self.first_party = first_party
        self.client_type = client_type
        self.redirect_uris = redirect_uris
        if authorization_code_lifetime_seconds is not None:
            self.authorization_code_lifetime_seconds = authorization_code_lifetime_seconds
        if access_id_token_lifetime_seconds is not None:
            self.access_id_token_lifetime_seconds = access_id_token_lifetime_seconds
        if refresh_token_lifetime_seconds is not None:
            self.refresh_token_lifetime_seconds = refresh_token_lifetime_seconds
        self.tenant_id = tenant_id

    @property
    def name(self):
        """Gets the name of this ClientCreate.  # noqa: E501


        :return: The name of this ClientCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientCreate.


        :param name: The name of this ClientCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def first_party(self):
        """Gets the first_party of this ClientCreate.  # noqa: E501


        :return: The first_party of this ClientCreate.  # noqa: E501
        :rtype: bool
        """
        return self._first_party

    @first_party.setter
    def first_party(self, first_party):
        """Sets the first_party of this ClientCreate.


        :param first_party: The first_party of this ClientCreate.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and first_party is None:  # noqa: E501
            raise ValueError("Invalid value for `first_party`, must not be `None`")  # noqa: E501

        self._first_party = first_party

    @property
    def client_type(self):
        """Gets the client_type of this ClientCreate.  # noqa: E501


        :return: The client_type of this ClientCreate.  # noqa: E501
        :rtype: ClientType
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this ClientCreate.


        :param client_type: The client_type of this ClientCreate.  # noqa: E501
        :type: ClientType
        """
        if self.local_vars_configuration.client_side_validation and client_type is None:  # noqa: E501
            raise ValueError("Invalid value for `client_type`, must not be `None`")  # noqa: E501

        self._client_type = client_type

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this ClientCreate.  # noqa: E501


        :return: The redirect_uris of this ClientCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this ClientCreate.


        :param redirect_uris: The redirect_uris of this ClientCreate.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and redirect_uris is None:  # noqa: E501
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")  # noqa: E501

        self._redirect_uris = redirect_uris

    @property
    def authorization_code_lifetime_seconds(self):
        """Gets the authorization_code_lifetime_seconds of this ClientCreate.  # noqa: E501


        :return: The authorization_code_lifetime_seconds of this ClientCreate.  # noqa: E501
        :rtype: int
        """
        return self._authorization_code_lifetime_seconds

    @authorization_code_lifetime_seconds.setter
    def authorization_code_lifetime_seconds(self, authorization_code_lifetime_seconds):
        """Sets the authorization_code_lifetime_seconds of this ClientCreate.


        :param authorization_code_lifetime_seconds: The authorization_code_lifetime_seconds of this ClientCreate.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                authorization_code_lifetime_seconds is not None and authorization_code_lifetime_seconds < 0):  # noqa: E501
            raise ValueError(
                "Invalid value for `authorization_code_lifetime_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._authorization_code_lifetime_seconds = authorization_code_lifetime_seconds

    @property
    def access_id_token_lifetime_seconds(self):
        """Gets the access_id_token_lifetime_seconds of this ClientCreate.  # noqa: E501


        :return: The access_id_token_lifetime_seconds of this ClientCreate.  # noqa: E501
        :rtype: int
        """
        return self._access_id_token_lifetime_seconds

    @access_id_token_lifetime_seconds.setter
    def access_id_token_lifetime_seconds(self, access_id_token_lifetime_seconds):
        """Sets the access_id_token_lifetime_seconds of this ClientCreate.


        :param access_id_token_lifetime_seconds: The access_id_token_lifetime_seconds of this ClientCreate.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                access_id_token_lifetime_seconds is not None and access_id_token_lifetime_seconds < 0):  # noqa: E501
            raise ValueError(
                "Invalid value for `access_id_token_lifetime_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._access_id_token_lifetime_seconds = access_id_token_lifetime_seconds

    @property
    def refresh_token_lifetime_seconds(self):
        """Gets the refresh_token_lifetime_seconds of this ClientCreate.  # noqa: E501


        :return: The refresh_token_lifetime_seconds of this ClientCreate.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_lifetime_seconds

    @refresh_token_lifetime_seconds.setter
    def refresh_token_lifetime_seconds(self, refresh_token_lifetime_seconds):
        """Sets the refresh_token_lifetime_seconds of this ClientCreate.


        :param refresh_token_lifetime_seconds: The refresh_token_lifetime_seconds of this ClientCreate.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                refresh_token_lifetime_seconds is not None and refresh_token_lifetime_seconds < 0):  # noqa: E501
            raise ValueError(
                "Invalid value for `refresh_token_lifetime_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._refresh_token_lifetime_seconds = refresh_token_lifetime_seconds

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ClientCreate.  # noqa: E501


        :return: The tenant_id of this ClientCreate.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ClientCreate.


        :param tenant_id: The tenant_id of this ClientCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tenant_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientCreate):
            return True

        return self.to_dict() != other.to_dict()
