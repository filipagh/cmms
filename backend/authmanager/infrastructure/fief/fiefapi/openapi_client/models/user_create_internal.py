# coding: utf-8

"""
    Fief Administration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.23.2
    Contact: contact@fief.dev
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from authmanager.infrastructure.fief.fiefapi.openapi_client.configuration import Configuration


class UserCreateInternal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'password': 'str',
        'is_active': 'bool',
        'is_superuser': 'bool',
        'is_verified': 'bool',
        'fields': 'object',
        'tenant_id': 'str'
    }

    attribute_map = {
        'email': 'email',
        'password': 'password',
        'is_active': 'is_active',
        'is_superuser': 'is_superuser',
        'is_verified': 'is_verified',
        'fields': 'fields',
        'tenant_id': 'tenant_id'
    }

    def __init__(self, email=None, password=None, is_active=True, is_superuser=False, is_verified=False, fields=None,
                 tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """UserCreateInternal - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._password = None
        self._is_active = None
        self._is_superuser = None
        self._is_verified = None
        self._fields = None
        self._tenant_id = None
        self.discriminator = None

        self.email = email
        self.password = password
        if is_active is not None:
            self.is_active = is_active
        if is_superuser is not None:
            self.is_superuser = is_superuser
        if is_verified is not None:
            self.is_verified = is_verified
        if fields is not None:
            self.fields = fields
        self.tenant_id = tenant_id

    @property
    def email(self):
        """Gets the email of this UserCreateInternal.  # noqa: E501


        :return: The email of this UserCreateInternal.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreateInternal.


        :param email: The email of this UserCreateInternal.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this UserCreateInternal.  # noqa: E501


        :return: The password of this UserCreateInternal.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreateInternal.


        :param password: The password of this UserCreateInternal.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def is_active(self):
        """Gets the is_active of this UserCreateInternal.  # noqa: E501


        :return: The is_active of this UserCreateInternal.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserCreateInternal.


        :param is_active: The is_active of this UserCreateInternal.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_superuser(self):
        """Gets the is_superuser of this UserCreateInternal.  # noqa: E501


        :return: The is_superuser of this UserCreateInternal.  # noqa: E501
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this UserCreateInternal.


        :param is_superuser: The is_superuser of this UserCreateInternal.  # noqa: E501
        :type: bool
        """

        self._is_superuser = is_superuser

    @property
    def is_verified(self):
        """Gets the is_verified of this UserCreateInternal.  # noqa: E501


        :return: The is_verified of this UserCreateInternal.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this UserCreateInternal.


        :param is_verified: The is_verified of this UserCreateInternal.  # noqa: E501
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def fields(self):
        """Gets the fields of this UserCreateInternal.  # noqa: E501


        :return: The fields of this UserCreateInternal.  # noqa: E501
        :rtype: object
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this UserCreateInternal.


        :param fields: The fields of this UserCreateInternal.  # noqa: E501
        :type: object
        """

        self._fields = fields

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UserCreateInternal.  # noqa: E501


        :return: The tenant_id of this UserCreateInternal.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UserCreateInternal.


        :param tenant_id: The tenant_id of this UserCreateInternal.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tenant_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreateInternal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserCreateInternal):
            return True

        return self.to_dict() != other.to_dict()
