# coding: utf-8

"""
    Fief Administration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.23.2
    Contact: contact@fief.dev
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from authmanager.infrastructure.fief.fiefapi.openapi_client.configuration import Configuration


class OAuthProviderCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'provider': 'AvailableOAuthProvider',
        'client_id': 'str',
        'client_secret': 'str',
        'scopes': 'list[str]',
        'name': 'str',
        'openid_configuration_endpoint': 'str'
    }

    attribute_map = {
        'provider': 'provider',
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'scopes': 'scopes',
        'name': 'name',
        'openid_configuration_endpoint': 'openid_configuration_endpoint'
    }

    def __init__(self, provider=None, client_id=None, client_secret=None, scopes=None, name=None,
                 openid_configuration_endpoint=None, local_vars_configuration=None):  # noqa: E501
        """OAuthProviderCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._provider = None
        self._client_id = None
        self._client_secret = None
        self._scopes = None
        self._name = None
        self._openid_configuration_endpoint = None
        self.discriminator = None

        self.provider = provider
        self.client_id = client_id
        self.client_secret = client_secret
        self.scopes = scopes
        if name is not None:
            self.name = name
        if openid_configuration_endpoint is not None:
            self.openid_configuration_endpoint = openid_configuration_endpoint

    @property
    def provider(self):
        """Gets the provider of this OAuthProviderCreate.  # noqa: E501


        :return: The provider of this OAuthProviderCreate.  # noqa: E501
        :rtype: AvailableOAuthProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this OAuthProviderCreate.


        :param provider: The provider of this OAuthProviderCreate.  # noqa: E501
        :type: AvailableOAuthProvider
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def client_id(self):
        """Gets the client_id of this OAuthProviderCreate.  # noqa: E501


        :return: The client_id of this OAuthProviderCreate.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuthProviderCreate.


        :param client_id: The client_id of this OAuthProviderCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_id is None:  # noqa: E501
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuthProviderCreate.  # noqa: E501


        :return: The client_secret of this OAuthProviderCreate.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuthProviderCreate.


        :param client_secret: The client_secret of this OAuthProviderCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_secret is None:  # noqa: E501
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def scopes(self):
        """Gets the scopes of this OAuthProviderCreate.  # noqa: E501


        :return: The scopes of this OAuthProviderCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this OAuthProviderCreate.


        :param scopes: The scopes of this OAuthProviderCreate.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and scopes is None:  # noqa: E501
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    @property
    def name(self):
        """Gets the name of this OAuthProviderCreate.  # noqa: E501


        :return: The name of this OAuthProviderCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuthProviderCreate.


        :param name: The name of this OAuthProviderCreate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def openid_configuration_endpoint(self):
        """Gets the openid_configuration_endpoint of this OAuthProviderCreate.  # noqa: E501


        :return: The openid_configuration_endpoint of this OAuthProviderCreate.  # noqa: E501
        :rtype: str
        """
        return self._openid_configuration_endpoint

    @openid_configuration_endpoint.setter
    def openid_configuration_endpoint(self, openid_configuration_endpoint):
        """Sets the openid_configuration_endpoint of this OAuthProviderCreate.


        :param openid_configuration_endpoint: The openid_configuration_endpoint of this OAuthProviderCreate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                openid_configuration_endpoint is not None and len(openid_configuration_endpoint) > 2083):
            raise ValueError(
                "Invalid value for `openid_configuration_endpoint`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                openid_configuration_endpoint is not None and len(openid_configuration_endpoint) < 1):
            raise ValueError(
                "Invalid value for `openid_configuration_endpoint`, length must be greater than or equal to `1`")  # noqa: E501

        self._openid_configuration_endpoint = openid_configuration_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthProviderCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuthProviderCreate):
            return True

        return self.to_dict() != other.to_dict()
