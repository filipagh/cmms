# coding: utf-8

"""
    Fief Administration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.23.2
    Contact: contact@fief.dev
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from authmanager.infrastructure.fief.fiefapi.openapi_client.configuration import Configuration


class TenantCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'registration_allowed': 'bool',
        'theme_id': 'str',
        'logo_url': 'str',
        'oauth_providers': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'registration_allowed': 'registration_allowed',
        'theme_id': 'theme_id',
        'logo_url': 'logo_url',
        'oauth_providers': 'oauth_providers'
    }

    def __init__(self, name=None, registration_allowed=True, theme_id=None, logo_url=None, oauth_providers=None,
                 local_vars_configuration=None):  # noqa: E501
        """TenantCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._registration_allowed = None
        self._theme_id = None
        self._logo_url = None
        self._oauth_providers = None
        self.discriminator = None

        self.name = name
        if registration_allowed is not None:
            self.registration_allowed = registration_allowed
        if theme_id is not None:
            self.theme_id = theme_id
        if logo_url is not None:
            self.logo_url = logo_url
        if oauth_providers is not None:
            self.oauth_providers = oauth_providers

    @property
    def name(self):
        """Gets the name of this TenantCreate.  # noqa: E501


        :return: The name of this TenantCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TenantCreate.


        :param name: The name of this TenantCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def registration_allowed(self):
        """Gets the registration_allowed of this TenantCreate.  # noqa: E501


        :return: The registration_allowed of this TenantCreate.  # noqa: E501
        :rtype: bool
        """
        return self._registration_allowed

    @registration_allowed.setter
    def registration_allowed(self, registration_allowed):
        """Sets the registration_allowed of this TenantCreate.


        :param registration_allowed: The registration_allowed of this TenantCreate.  # noqa: E501
        :type: bool
        """

        self._registration_allowed = registration_allowed

    @property
    def theme_id(self):
        """Gets the theme_id of this TenantCreate.  # noqa: E501


        :return: The theme_id of this TenantCreate.  # noqa: E501
        :rtype: str
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this TenantCreate.


        :param theme_id: The theme_id of this TenantCreate.  # noqa: E501
        :type: str
        """

        self._theme_id = theme_id

    @property
    def logo_url(self):
        """Gets the logo_url of this TenantCreate.  # noqa: E501


        :return: The logo_url of this TenantCreate.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this TenantCreate.


        :param logo_url: The logo_url of this TenantCreate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                logo_url is not None and len(logo_url) > 65536):
            raise ValueError("Invalid value for `logo_url`, length must be less than or equal to `65536`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                logo_url is not None and len(logo_url) < 1):
            raise ValueError("Invalid value for `logo_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._logo_url = logo_url

    @property
    def oauth_providers(self):
        """Gets the oauth_providers of this TenantCreate.  # noqa: E501


        :return: The oauth_providers of this TenantCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._oauth_providers

    @oauth_providers.setter
    def oauth_providers(self, oauth_providers):
        """Sets the oauth_providers of this TenantCreate.


        :param oauth_providers: The oauth_providers of this TenantCreate.  # noqa: E501
        :type: list[str]
        """

        self._oauth_providers = oauth_providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TenantCreate):
            return True

        return self.to_dict() != other.to_dict()
