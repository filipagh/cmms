# coding: utf-8

"""
    Fief Administration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.23.2
    Contact: contact@fief.dev
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from authmanager.infrastructure.fief.fiefapi.openapi_client.configuration import Configuration


class WebhookLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'id': 'str',
        'webhook_id': 'str',
        'event': 'WebhookEventType',
        'attempt': 'int',
        'payload': 'str',
        'success': 'bool',
        'response': 'str',
        'error_type': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'id': 'id',
        'webhook_id': 'webhook_id',
        'event': 'event',
        'attempt': 'attempt',
        'payload': 'payload',
        'success': 'success',
        'response': 'response',
        'error_type': 'error_type',
        'error_message': 'error_message'
    }

    def __init__(self, created_at=None, updated_at=None, id=None, webhook_id=None, event=None, attempt=None,
                 payload=None, success=None, response=None, error_type=None, error_message=None,
                 local_vars_configuration=None):  # noqa: E501
        """WebhookLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._updated_at = None
        self._id = None
        self._webhook_id = None
        self._event = None
        self._attempt = None
        self._payload = None
        self._success = None
        self._response = None
        self._error_type = None
        self._error_message = None
        self.discriminator = None

        self.created_at = created_at
        self.updated_at = updated_at
        self.id = id
        self.webhook_id = webhook_id
        self.event = event
        self.attempt = attempt
        self.payload = payload
        self.success = success
        if response is not None:
            self.response = response
        if error_type is not None:
            self.error_type = error_type
        if error_message is not None:
            self.error_message = error_message

    @property
    def created_at(self):
        """Gets the created_at of this WebhookLog.  # noqa: E501


        :return: The created_at of this WebhookLog.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WebhookLog.


        :param created_at: The created_at of this WebhookLog.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this WebhookLog.  # noqa: E501


        :return: The updated_at of this WebhookLog.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this WebhookLog.


        :param updated_at: The updated_at of this WebhookLog.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this WebhookLog.  # noqa: E501


        :return: The id of this WebhookLog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookLog.


        :param id: The id of this WebhookLog.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def webhook_id(self):
        """Gets the webhook_id of this WebhookLog.  # noqa: E501


        :return: The webhook_id of this WebhookLog.  # noqa: E501
        :rtype: str
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this WebhookLog.


        :param webhook_id: The webhook_id of this WebhookLog.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and webhook_id is None:  # noqa: E501
            raise ValueError("Invalid value for `webhook_id`, must not be `None`")  # noqa: E501

        self._webhook_id = webhook_id

    @property
    def event(self):
        """Gets the event of this WebhookLog.  # noqa: E501


        :return: The event of this WebhookLog.  # noqa: E501
        :rtype: WebhookEventType
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WebhookLog.


        :param event: The event of this WebhookLog.  # noqa: E501
        :type: WebhookEventType
        """
        if self.local_vars_configuration.client_side_validation and event is None:  # noqa: E501
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def attempt(self):
        """Gets the attempt of this WebhookLog.  # noqa: E501


        :return: The attempt of this WebhookLog.  # noqa: E501
        :rtype: int
        """
        return self._attempt

    @attempt.setter
    def attempt(self, attempt):
        """Sets the attempt of this WebhookLog.


        :param attempt: The attempt of this WebhookLog.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and attempt is None:  # noqa: E501
            raise ValueError("Invalid value for `attempt`, must not be `None`")  # noqa: E501

        self._attempt = attempt

    @property
    def payload(self):
        """Gets the payload of this WebhookLog.  # noqa: E501


        :return: The payload of this WebhookLog.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this WebhookLog.


        :param payload: The payload of this WebhookLog.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and payload is None:  # noqa: E501
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    @property
    def success(self):
        """Gets the success of this WebhookLog.  # noqa: E501


        :return: The success of this WebhookLog.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this WebhookLog.


        :param success: The success of this WebhookLog.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and success is None:  # noqa: E501
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def response(self):
        """Gets the response of this WebhookLog.  # noqa: E501


        :return: The response of this WebhookLog.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this WebhookLog.


        :param response: The response of this WebhookLog.  # noqa: E501
        :type: str
        """

        self._response = response

    @property
    def error_type(self):
        """Gets the error_type of this WebhookLog.  # noqa: E501


        :return: The error_type of this WebhookLog.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this WebhookLog.


        :param error_type: The error_type of this WebhookLog.  # noqa: E501
        :type: str
        """

        self._error_type = error_type

    @property
    def error_message(self):
        """Gets the error_message of this WebhookLog.  # noqa: E501


        :return: The error_message of this WebhookLog.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this WebhookLog.


        :param error_message: The error_message of this WebhookLog.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookLog):
            return True

        return self.to_dict() != other.to_dict()
