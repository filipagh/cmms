# coding: utf-8

"""
    Fief Administration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.23.2
    Contact: contact@fief.dev
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from authmanager.infrastructure.fief.fiefapi.openapi_client.configuration import Configuration


class UserFieldConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'at_registration': 'bool',
        'required': 'bool',
        'at_update': 'bool',
        'choices': 'list[list[object]]',
        'default': 'AnyOfstringbooleanintegerstring'
    }

    attribute_map = {
        'at_registration': 'at_registration',
        'required': 'required',
        'at_update': 'at_update',
        'choices': 'choices',
        'default': 'default'
    }

    def __init__(self, at_registration=None, required=None, at_update=None, choices=None, default=None,
                 local_vars_configuration=None):  # noqa: E501
        """UserFieldConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._at_registration = None
        self._required = None
        self._at_update = None
        self._choices = None
        self._default = None
        self.discriminator = None

        self.at_registration = at_registration
        self.required = required
        self.at_update = at_update
        if choices is not None:
            self.choices = choices
        if default is not None:
            self.default = default

    @property
    def at_registration(self):
        """Gets the at_registration of this UserFieldConfiguration.  # noqa: E501


        :return: The at_registration of this UserFieldConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._at_registration

    @at_registration.setter
    def at_registration(self, at_registration):
        """Sets the at_registration of this UserFieldConfiguration.


        :param at_registration: The at_registration of this UserFieldConfiguration.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and at_registration is None:  # noqa: E501
            raise ValueError("Invalid value for `at_registration`, must not be `None`")  # noqa: E501

        self._at_registration = at_registration

    @property
    def required(self):
        """Gets the required of this UserFieldConfiguration.  # noqa: E501


        :return: The required of this UserFieldConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this UserFieldConfiguration.


        :param required: The required of this UserFieldConfiguration.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and required is None:  # noqa: E501
            raise ValueError("Invalid value for `required`, must not be `None`")  # noqa: E501

        self._required = required

    @property
    def at_update(self):
        """Gets the at_update of this UserFieldConfiguration.  # noqa: E501


        :return: The at_update of this UserFieldConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._at_update

    @at_update.setter
    def at_update(self, at_update):
        """Sets the at_update of this UserFieldConfiguration.


        :param at_update: The at_update of this UserFieldConfiguration.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and at_update is None:  # noqa: E501
            raise ValueError("Invalid value for `at_update`, must not be `None`")  # noqa: E501

        self._at_update = at_update

    @property
    def choices(self):
        """Gets the choices of this UserFieldConfiguration.  # noqa: E501


        :return: The choices of this UserFieldConfiguration.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this UserFieldConfiguration.


        :param choices: The choices of this UserFieldConfiguration.  # noqa: E501
        :type: list[list[object]]
        """

        self._choices = choices

    @property
    def default(self):
        """Gets the default of this UserFieldConfiguration.  # noqa: E501


        :return: The default of this UserFieldConfiguration.  # noqa: E501
        :rtype: AnyOfstringbooleanintegerstring
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this UserFieldConfiguration.


        :param default: The default of this UserFieldConfiguration.  # noqa: E501
        :type: AnyOfstringbooleanintegerstring
        """

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserFieldConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserFieldConfiguration):
            return True

        return self.to_dict() != other.to_dict()
